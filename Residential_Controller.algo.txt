////// PRESENTATION IS @ https://www.youtube.com/watch?v=fLj_INmtBCI ///
////Some additional requirements I implemented on the residential algo and some on the commercial one////

/// Define Objects////

DEFINE 

elevatorA, elevatorB USING floor AND direction AND door AND on AND 
    Floor : floor
    Direction : direction 
    Door : door
    Queue SET to empty list
    Status : on

column SET to list [elevatorA, elevatorB];

FOR EACH floors of building
    FOR BOTH directions
     button USING floor AND direction
        Floor : floor
        Direction : direction
    END FOR
END FOR

calledButtons SET to empty list
      
END DEFINE

SEQUENCE elevator.move 

    IF elevator.Direction is up AND elevator.floor is not top floor THEN
        INCREMENT elevator.Floor by one
    ELSE IF elevator.Direction is down AND elevator.floor is not lowest floor THEN
        INCREMENT elevator.Floor by minus one
     END IF

END SEQUENCE
            

SEQUENCE elevator.open 

    SET elevator.Door to open

END SEQUENCE

SEQUENCE elevator.close 

    SET elevator.Door to close

END SEQUENCE

SEQUENCE elevator.select USING number n
    ADD n to elevator.Queue
    IF elevator.Direction is idle THEN
        IF n greater than elevator.Floor THEN
             SET elevator.Direction to up
        ELSE IF n smaller than elevator.Floor THEN
            SET elevator.Direction to down
        END IF
    END IF

SEQUENCE

SEQUENCE elevator.checkfloor

    FOR EACH item IN elevator.Queue
        IF 
            elevator.floor equals item THEN
                Elevator stops at floor
                elevator.open
                READ for movement in doorframe
                    IF no movement for 5 seconds THEN
                        elevator.close
                    END IF
            REMOVE item IN elevator.Queue
        END IF
    END FOR

    IF elevator.Queue is not empty THEN
        GET maximum value of item IN elevator.Queue
        GET minimum value of item IN elevator.Queue
    END IF

    IF elevator.Queue is empty THEN
        SET elevator.Direction TO idle
    ELSE IF elevator.Direction is up AND elevator.Floor greater than maximum value THEN
        SET elevator.Direction TO Down ///Ensure that elevator collect down calls if there's no more call above
    ELSE IF elevator.Direction is down AND elevator.Floor smaller than minimum value THEN
        SET elevator.Direction TO up ///Ensure that elevator collect up calls if there's no more call below
    END IF

END SEQUENCE

SEQUENCE column.choose USING button

    IF both elevators are idle THEN     //Select closest idle elevator ///
        GET elevator closest to button
        ADD button.Floor IN elevator.Queue
        SET elevator.Direction towards button.Floor
        REMOVE button IN calledButtons

    ELSE IF one elevator is moving and one is idle THEN

         CASE button.Direction OF
            button.Direction is up :
                IF elevator.Direction is up AND button.Floor greater than elevator.Floor THEN
                    GET up elevator
                    ADD button.Floor IN elevator.Queue  //Select elevator going up towards call first///
                    REMOVE button IN calledButtons
                 ELSE
                    GET idle elevator
                    ADD button.Floor IN elevator.Queue  //Select Idle elevator second///
                    SET elevator.Direction towards button.Floors
                    REMOVE button IN calledButtons
                END IF
            button.Direction is down :
                IF elevator.Direction is down AND button.floor smaller than elevator.Floor THEN
                    GET down elevator
                    ADD button.Floor IN selected elevator.Queue //Select elevator goin down towards call first//
                    REMOVE button IN calledButtons
                ELSE
                    GET idle elevator
                    ADD button.Floor IN selected elevator.Queue
                    SET selected elevator.Direction towards button.Floors  //Select idle elevator second//
                    REMOVE button IN calledButtons
                END IF
            END CASE

    ELSE IF both elevators are moving up THEN
        IF button.Direction is up THEN
            IF button.Floor greater than elevator.Floor for both elevators THEN
                GET closest elevator
                ADD button.Floor IN elevator.Queue 
                REMOVE button IN calledButtons
            ELSE IF button.Floor greater than elevator.Floor for one elevator THEN
                GET this elevator
                ADD button.Floor IN selected elevator.Queue
                REMOVE button IN calledButtons
            END IF
        END IF

    ELSE IF both elevators are moving down THEN
        IF button.Direction is down THEN
            IF button.Floor smaller than elevator.Floor for both elevators THEN
                GET closest elevator
                ADD button.Floor IN selected elevator.Queue
                REMOVE button IN calledButtons
            ELSE IF button.Floor smaller than elevator.Floor for one elevator THEN
                GET this elevator
                ADD button.Floor IN selected elevator.Queue
                REMOVE button IN calledButtons
            END IF
        END IF

    ELSE IF elevators are moving in opposite direction THEN

        CASE button.Direction OF
            button.Direction is up :
                 IF elevator.Direction is up AND button.Floor greater than elevator.Floor THEN
                    GET up elevator
                    ADD button.Floor IN selected elevator.Queue
                    REMOVE button IN calledButtons
                END IF

            button.Direction is down :
                IF elevator.Direction is down AND button.Floor smaller than elevator.Floor THEN
                    GET down elevator
                    ADD button.Floor IN elevator.Queue
                    REMOVE button IN calledButtons
                END IF
        END CASE
    END IF

END SEQUENCE

SEQUENCE column.move

            CALL elevatorA.move
            CALL elevatorB.move
            CALL elevatorA.checkfloor
            CALL elevator.checkfloor

END SEQUENCE

SEQUENCE elevator.Rest USING number n

    IF elevator.Direction is idle for x amount of time THEN
        ADD n to elevator.Queue
        IF elevator.Floor is smaller than n THEN
            SET elevator.Direction to up
        ELSE IF elevator.Floor is greater than n THEN
            SET elevator.Direction to down
        END IF
    END IF

END SEQUENCE
            
   

/////ELEVATORS DO THEIR WORK //////////

WHILE elevatorA.Status AND elevatorB.Status are on

    IF floor button is pressed THEN    ////Calls from floors
        ADD button to calledButtons
    END IF

    WHILE calledButtons is not empty        /////Dispatch the calls
        FOR EACH buttons in calledButtons
            CALL column.choose WITH button
        END FOR
    END WHILE

    CALL elevatorA.Rest WITH RC ////Set elevator to given floors after a while
    CALL elevatorB.Rest WITH 5  

    CALL Column.move      ////Make everything move

    IF selection button in elevator to floor m is pressed THEN   /////Calls from selection pannel in elevator
        CALL elevator.Select WITH number m
    END IF

END WHILE

///TEST WITH SCENARIO 2/////

//elevatorA.Direction is idle, elevatorA.Floor is 10, Queue is empty
//elevatorB.Direction is idle, elevator.Floor is 3, Queue is empty

*Start loop*
*A call is made on floor 1 to go up*

ADD button with floor 1 and direction up to calledButtons

Since calledButtons is not empty,
CALL column.choose with above button : 

    First Check is true, both elevators are idle
    GET elevatorB since it's closest to floor 1
    ADD this button.Floor = 1 to elevatorB.Queue
    SET elevatorB.Direction to down (towards floor 1)
    REMOVE button from calledButtons

CALL elevator.Rest, which do nothing for now

CALL column.move    
    Since elevatorA.Direction is idle, it doesn't move
    ElevatorB goes down one floor and elevatorB.Floor is now 2
    elevatorA.CheckFloors and elevatorB.checkFloors does nothing for now

*LOOP again, which only changes elevatorB.Floor to 1*
    Now when elevatorB.checkFloors is called
        elevatorB.Floor equals elevator.Queue 1 so,
            open door, wait and close door
            Remove 1 from elevator.Queue
            Since Queue is now empty, set elevatorB.Direction to idle

*A select call is made in elevator B to floor 6 *

CALL elevatorB.select USING 6
    ADD 6 to elevatorB.Queue
        Since elevatorB is idle and below 6,
        SET elevatorB.Direction to up

*LOOPS where nothing happen except elevatorB goin up, until elevatorB.Floor is 6*

    Now when elevatorB.checkFloors is called
        elevatorB.Floor equals elevatorB.Queue of 6,
            open, wait and close door
            Remove 6 from Queue
            Since Queue is now empty, set elevatorB.Direction to idle

*LOOPS for 2 minutes, where elevator.Rest does nothing since it activate after 5 minutes*

*A call is made on floor 3 going up*
    By the same process, since both elevators are idle and B is closest, it is selected.
    Repeat the exact same steps as above

For the third call at floor 9, going down, it is now A that is closest, hence it is choose
    The next steps are identical as above, but for elevatorA

///ADDITIONAL REQUIREMENTS ////

///Temporal Logic /////

///Schedule implementation///

                               
FOR EACH hour of the day 
    CREATE calledFloorsA, calledFloorsB USING hour AND max  ///Create lists of all floors called at each hour
        Hour : hour
        Floors AS empty list
        Max : max

    FOR EACH button
        IF  button.Floor is added to elevatorA.Queue THEN
            Add button.Floor to calledFloorsA.Floors
        ELSE IF  button.Floor is added to elevatorB.Queue THEN  //Add any called buttons to list
        END IF
    END FOR
END FOR
    
FOR EACH calledFloorsA.Hour
    FOR EACH item in calledFloorsA.Floors
        CALCULATE number of times each button.Floor appears
        READ button.Floor with maximum appearance
        SET calledFloorsA.Max to this button.Floor      //This gives which floor elevatorA deserve the most at each hour
    END FOR
END FOR

FOR EACH calledFloorsB.Hour
    FOR EACH item in calledFloorsB.Floors
        CALCULATE number of times each button.Floor appears
        READ button.Floor with maximum appearance
        SET calledFloorsB.Max to this button.Floor      //This gives which floor elevatorB deserve the most at each hour
    END FOR
END FOR

*Now instead of just calling elevator.Rest in the loop, we do below:*

FOR EACH hour the day
    IF hour THEN
        GET calledFloorsA with calledFloorsA.Hour equal to hour
        CALL elevatorA.Rest USING calledFloorsA.Max

        GET calledFloorsA with calledFloorsA.Hour equal to hour
        CALL elevatorA.Rest USING calledFloorsA.Max           ///Set rest floor to most deserved floor at this hour
    END IF
END FOR

////Logic of loading //////

ADD elevator.Weight to elevators properties USING Weight
    Weight : weight

 *Instead of line 26 "SEQUENCE elevator.move", use the following:*
 *This will check the weight at every loop*
 

SEQUENCE elevator.weightWatcher

    READ elevator.Weight
    IF elevator.Weight is greater than some amout THEN
        elevator.open    //Ensure doors are open and elevator stays on current floor
    ELSE
        IF elevator.Direction is up AND elevator.floor is not top floor THEN
            elevator.close    //Ensure doors are closed and go on it's way
            INCREMENT elevator.Floor by one
        ELSE IF elevator.Direction is down AND elevator.floor is not lowest floor THEN
            elevator.close
            INCREMENT elevator.Floor by minus one
        END IF
    END IF

END SEQUENCE














