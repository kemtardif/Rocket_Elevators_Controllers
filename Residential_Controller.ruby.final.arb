# Define Objects

class Elevator
    attr_accessor :id, :floor, :direction, :door, :queue, :selected
    
    def initialize(id, floor, direction, door)
        @id = id
        @floor = floor
        @direction = direction
        @door = door
        @queue = []
        @selected = []
    end
        
    def open()
        self.door = "open"
    end

    def close()
        self.door = "closed"
    end
        
    def move()
        if self.direction != "idle"
            if self.direction == "up" and self.floor < 10
                self.floor += 1
            elsif self.direction == "down" and self.floor > 1
                self.floor -= 1
            end
            floor1 = (self.floor).to_s
            direction1 = self.direction
            puts "Elevator " + self.id + " is moving " + direction1 + " and is at floor " + floor1
        end
    end

    def requestFloor()
        puts "Select destination:"
        n = gets.chomp
        puts "You selected floor " + n
        n = n.to_i
        if (self.queue).length == 0 and self.direction == "idle"
            if self.floor > n
                self.direction = "down"
            elsif self.floor < n
                self.direction = "up"
            end
        end
        self.selected.push(n)
    end

    def checkFloor()
        for item in self.queue
            if self.floor == item
                f = self.floor.to_s
                puts "Elevator " + self.id + " arrived at floor " + f
                self.open()
                puts "Doors open"
                puts "Waiting for people to get in and out..."
                sleep(5)
                puts "Doors are now closing"
                self.close()
                y = self.queue.index(item)
                self.queue.delete_at(y)
                self.requestFloor()
            end
        end
        
        for item in self.selected
            if self.floor == item
                puts "Elevator " + self.id + " arrived at it's destination"
                self.open()
                puts "Doors open"
                puts "Waiting for people to get in and out..."
                sleep(3)
                puts "Doors are now closing"
                self.close()
                x = self.selected.index(item)
                self.selected.delete_at(x)
            end
        end

        if (self.selected).length != 0 and (self.queue).length == 0
            if self.direction == "up" and self.floor > (self.selected).max
                self.direction = "down"
            elsif self.direction == "down" and self.floor < (self.selected).min
                self.direction = "up"
            end
        end
        

        if (self.queue).length == 0 and (self.selected).length == 0
            self.direction = "idle"
        end
    end
end
      
class Controller
    attr_accessor :calls, :column
    def initialize()
        @column = []
        @calls = []

    end
    
    def findDirection(a, c)
        if a.floor > c[0]
            a.direction = "down"
        elsif a.floor < c[0]
            a.direction = "up"
        end
    end
    
    def getClosest(a, b, c)
        absA = (a.floor - c[0]).abs
        absB = (b.floor - c[0]).abs
        if absA > absB
            b.queue.push(c[0])
            self.calls.delete(c)
            puts "Elevator B is selected"
            if b.floor - c[0] > 0
                b.direction = "down"
            elsif b.floor-c[0] < 0
                b.direction = "up"
            end
        elsif absB > absA
            a.queue.push(c[0])
            self.calls.delete(c)
            puts "Elevator A is selected"
            if a.floor - c[0] > 0
                a.direction = "down"
            elsif a.floor - c[0] < 0
                a.direction = "up"
            end
        else
            a.queue.push(c[0])
            self.calls.delete(c)
            self.findDirection(a, c)
            puts "Elevator A is selected"
        end
    end

    def requestElevator(a, b, c)
    
        if a.direction == "idle" and b.direction == "idle"  #Both are idle
            self.getClosest(a, b, c)
        elsif a.direction != "idle" and b.direction == "idle" #A is moving, B is idle
            if c[1] == "up"
                if a.direction == "up" and c[0] > a.floor
                    a.queue.push(self.floor)
                    puts "Elevator A is selected"
                    self.calls.delete(c)
                else
                    b.queue.push(c[0])
                    puts "Elevator B is selected"
                    self.calls.delete(c)
                    self.findDirection(b, c)
                end
            else
                if a.direction == "down" and c[0] < a.floor
                    a.queue.push(c[0])
                    puts "Elevator A is selected"
                    self.calls.delete(c)
                else
                    b.queue.push(c[0])
                    puts "Elevator B is selected"
                    self.calls.delete(c)
                    self.findDirection(b, c)
                end
            end
        elsif b.direction != "idle" and a.direction == "idle" #B is moving, A is idle
            if c[1] == "up"
                if b.direction == "up" and c[0] > b.floor
                    b.queue.push(c[0])
                    puts "Elevator B is selected "
                    self.calls.delete(c)
                else
                    a.queue.push(c[0])
                    puts "Elevator A is selected"
                    self.calls.delete(c)
                    self.findDirection(a, c)
                end
            else
                if b.direction == "down" and c[0] < b.floor
                    b.queue.push(c[0])
                    puts "Elevator B is selected"
                    self.calls.delete(c)
                else
                    a.queue.push(c[0])
                    puts "Elevator A is selected"
                    self.calls.delete(c)
                    self.findDirection(a, c)
                end
            end
    
        elsif a.direction == "up" and b.direction == "up" and c[1] == "up" #Both are going up and up call
                if c[0] > a.floor and c[0] > b.floor
                    self.getClosest(a, b, c)
                elsif c[0] > a.floor
                    a.queue.push(c[0])
                    puts "Elevator A is selected"
                    self.calls.delete(c)
                elsif c[0] > b.floor
                    b.queue.push(c[0])
                    puts "Elevator B is selected"
                    self.calls.delete(c)
                end
        elsif a.direction == "down" and b.direction == "down" and c[1] == "down" #Both are going down and down call
            if c[0] < a.floor and c[0] < b.floor
                self.getClosest(a, b, c)
            elsif c[0] < a.floor
                a.queue.push(c[0])
                puts"Elevator A is selected"
                self.calls.delete(c)
            elsif c[0] < b.floor
                b.queue.push(c[0])
                puts"Elevator B is selected"
                self.calls.delete(c)
            end
        elsif a.direction != "idle" and b.direction != "idle" and a.direction != b.direction #Opposite direction
            if c[1] == "up"
                if a.direction == "up" and c[0] > a.floor
                    a.queue.push(c[0])
                    puts "Elevator A is selected"
                    self.calls.delete(c)
                elsif b.direction == "up" and c[0] > b.floor
                    b.queue.push(c[0])
                    puts "Elevator B is selected"
                    self.calls.delete(c)
                end
            else
                if a.direction == "down" and c[0] < a.floor
                    a.queue.push(c[0])
                    puts "Elevator A is selected"
                    self.calls.delete(c)
                elsif b.direction == "down" and c[0] < b.floor
                    b.queue.push(c[0])
                    puts "Elevator B is selected"
                    self.calls.delete(c)
                end
            end
        end
    end
    

    def selection(a, b)

        puts "Select the floor you're at:"
        f = gets.chomp
        puts "You are at floor" + f
        puts "Select which direction you are going:"
        d = gets.chomp
        puts "You want to go" + d
        f = f.to_i
        c = [f, d]
        self.calls.push(c)
        self.requestElevator(a, b, c)
    end

    def setup(a, b)
        puts "We first need to setup the inital configurations"
        puts "First choose Elevator A initial floor: "
        i = gets.chomp
        i = i.to_i
        puts "Now select Elevator A initial direction:"
        j = gets.chomp
            if j != "idle"
                puts "Select Elevator A destination: "
                k = gets.chomp
                k = k.to_i
                a.selected.push(k)
            end
        puts "Now select Elevator B initial floor: "
        x = gets.chomp
        x = x.to_i
        puts "Select Elevator B initial direction:"
        y = gets.chomp
            if y != "idle"
                puts "Select Elevator B destination:"
                z = gets.chomp
                z = z.to_i
                b.selected.push(z)
            end
        a.floor = i
        b.floor = x
        a.direction = j
        b.direction = y
        self.selection(a, b)
    end

    def moveColumn(a, b)
        while (a.queue).length != 0 or (a.selected).length != 0 or (b.queue).length != 0 or (b.selected).length != 0 
            for item in self.column
                if (item.queue).length == 0 and (item.selected).length == 0
                        item.direction = "idle"
                end
            end
            for item in self.column
                item.move()
                item.checkFloor()
            end
            for item in self.calls
                self.requestElevator(a, b, item)
            end
            sleep(1)
        end
    end

end


#Setting up the scenarios

controller = Controller.new()
elevatorA = Elevator.new("A", 2, "idle", "closed")
elevatorB = Elevator.new("B", 6, "idle", "closed")
controller.column.push(elevatorA)
controller.column.push(elevatorB)


controller.setup(elevatorA, elevatorB)

variable = 1
while variable == 1
    
    controller.moveColumn(elevatorA, elevatorB)

    puts "Both elevators are now empty, waiting for another call"
    controller.selection(elevatorA, elevatorB)

end